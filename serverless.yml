custom:
  secrets: ${file(.secrets.json)}
  tableName: "wa-api-users-table"
  serverless-offline:
    noPrependStageInUrl: true

service: wa-api-v1

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ${self:custom.secrets.AWS_REGION}
  apiGateway:
    apiKeys:
      - myApiKey
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    AWS_ID: ${self:custom.secrets.AWS_ID}
  lambdaHashingVersion: "20201221"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:${self:custom.secrets.AWS_REGION}:${self:custom.secrets.AWS_ID}:table/LibraryTable
        - arn:aws:dynamodb:${self:custom.secrets.AWS_REGION}:${self:custom.secrets.AWS_ID}:table/Cleaners
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
      Resource:
        - arn:aws:dynamodb:${self:custom.secrets.AWS_REGION}:${self:custom.secrets.AWS_ID}:table/${self:custom.tableName}
functions:
  verify-token:
    handler: functions/authorize.handler
  me:
    handler: functions/me.handler
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer:
            name: verify-token
                        # this tells the lambda where to take the information from, 
                        # in our case the HTTP Authorization header
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
  login:
    handler: functions/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
          private: true
  register:
    handler: functions/register.handler
    events:
      - http:
          path: register
          method: post
          cors: true
          private: true
  app:
    handler: index.handler
    events:
      - http:
          path: /api/library/books
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/library/books/{uid}
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/library/books
          method: POST
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/library/books/{uid}
          method: PUT
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/library/books/{uid}
          method: DELETE
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/wac/cleaners
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/wac/cleaners/{uid}
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/wac/cleaners
          method: POST
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/wac/cleaners/{uid}
          method: PUT
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/wac/cleaners/{uid}
          method: DELETE
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour
      - http:
          path: /api/wac/new-cleaners
          method: GET
          cors: true
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 3600 # cache the result for 1 hour

resources:
  - ${file(resources/dynamodb-tables.yml)}
plugins:
  - serverless-offline
  - serverless-puresec-cli